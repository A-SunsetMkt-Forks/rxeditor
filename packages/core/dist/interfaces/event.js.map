{"version":3,"sources":["../../src/interfaces/event.ts"],"sourcesContent":["\r\nimport { isFn } from \"utils/types\"\r\nimport _ from \"lodash\"\r\nimport { Unsubscribe } from \"./types\"\r\n\r\nexport interface ICustomEvent<EventData = any> {\r\n  type: string\r\n  data?: EventData\r\n}\r\nexport interface CustomEventClass {\r\n  new(...args: any[]): any\r\n}\r\n\r\nexport interface ISubscriber<EventType = any> {\r\n  (payload: EventType): void | boolean\r\n}\r\n\r\nexport interface IDispatchable<T> {\r\n  dispatch(event: T): void | boolean\r\n}\r\n\r\nexport interface ISubscribable {\r\n  subscribeTo<T extends CustomEventClass>(\r\n    type: T,\r\n    subscriber: ISubscriber<InstanceType<T>>\r\n  ): Unsubscribe,\r\n}\r\n\r\nexport abstract class EventEngine<EventType extends CustomEventClass = any> implements IDispatchable<EventType>, ISubscribable {\r\n  private subscribers: {\r\n    [key: string]: ISubscriber\r\n  } = {}\r\n\r\n  dispatch<T extends EventType = any>(event: T, context?: any) {\r\n    let interrupted = false;\r\n    for (const key in this.subscribers) {\r\n      if (isFn(this.subscribers[key])) {\r\n        if (this.subscribers[key](event) === false) {\r\n          interrupted = true\r\n        }\r\n      }\r\n    }\r\n\r\n    return interrupted ? false : true\r\n  }\r\n\r\n  subscribeTo<T extends CustomEventClass>(\r\n    type: T,\r\n    subscriber: ISubscriber<InstanceType<T>>\r\n  ) {\r\n    return this.subscribe((event) => {\r\n      if (type && event instanceof type) {\r\n        return subscriber(event)\r\n      }\r\n    })\r\n  }\r\n\r\n  private subscribe(subscriber: ISubscriber) {\r\n    const id = _.uniqueId()\r\n    if (isFn(subscriber)) {\r\n      this.subscribers[id] = subscriber\r\n    }\r\n\r\n    const unsubscribe: Unsubscribe = () => {\r\n      this.unsubscribe(id)\r\n    }\r\n\r\n    return unsubscribe\r\n  }\r\n\r\n  private unsubscribe = (id: string) => {\r\n    if (this.subscribers[id]) {\r\n      delete this.subscribers[id]\r\n    }\r\n  }\r\n}\r\n"],"names":["isFn","_","EventEngine","dispatch","event","context","interrupted","key","subscribers","subscribeTo","type","subscriber","subscribe","id","uniqueId","unsubscribe"],"mappings":"AACA,SAASA,IAAI,QAAQ,cAAa;AAClC,OAAOC,OAAO,SAAQ;AA0BtB,OAAO,MAAeC;IAKpBC,SAAoCC,KAAQ,EAAEC,OAAa,EAAE;QAC3D,IAAIC,cAAc,KAAK;QACvB,IAAK,MAAMC,OAAO,IAAI,CAACC,WAAW,CAAE;YAClC,IAAIR,KAAK,IAAI,CAACQ,WAAW,CAACD,IAAI,GAAG;gBAC/B,IAAI,IAAI,CAACC,WAAW,CAACD,IAAI,CAACH,WAAW,KAAK,EAAE;oBAC1CE,cAAc,IAAI;gBACpB,CAAC;YACH,CAAC;QACH;QAEA,OAAOA,cAAc,KAAK,GAAG,IAAI;IACnC;IAEAG,YACEC,IAAO,EACPC,UAAwC,EACxC;QACA,OAAO,IAAI,CAACC,SAAS,CAAC,CAACR,QAAU;YAC/B,IAAIM,QAAQN,iBAAiBM,MAAM;gBACjC,OAAOC,WAAWP;YACpB,CAAC;QACH;IACF;IAEQQ,UAAUD,UAAuB,EAAE;QACzC,MAAME,KAAKZ,EAAEa,QAAQ;QACrB,IAAId,KAAKW,aAAa;YACpB,IAAI,CAACH,WAAW,CAACK,GAAG,GAAGF;QACzB,CAAC;QAED,MAAMI,cAA2B,IAAM;YACrC,IAAI,CAACA,WAAW,CAACF;QACnB;QAEA,OAAOE;IACT;;aAvCQP,cAEJ,CAAC;aAuCGO,cAAc,CAACF,KAAe;YACpC,IAAI,IAAI,CAACL,WAAW,CAACK,GAAG,EAAE;gBACxB,OAAO,IAAI,CAACL,WAAW,CAACK,GAAG;YAC7B,CAAC;QACH;;AACF,CAAC"}