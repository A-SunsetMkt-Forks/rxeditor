{"version":3,"sources":["../../src/controllers/StartDragController.ts"],"sourcesContent":["import { DragStartEvent } from \"shell/events/mouse\";\r\nimport { IDesignerEngine, NodeType, Unsubscribe } from \"interfaces\";\r\nimport { getOffset, getPosition } from \"shell/utils/xycoord\";\r\nimport { IPlugin } from \"interfaces/plugin\";\r\n\r\nexport class StartDragControllerImpl implements IPlugin {\r\n  name: string = \"default.start-drag-controller\";\r\n\r\n  unsucribe: Unsubscribe\r\n  constructor(protected engine: IDesignerEngine) {\r\n    this.unsucribe = engine.getShell().subscribeTo(DragStartEvent, this.handleDragStart)\r\n  }\r\n\r\n  handleDragStart = (e: DragStartEvent) => {\r\n    if (e.data.targetRx?.nodeType === NodeType.Resource) {\r\n      e.data.targetRx?.rxId && this.engine.getActions().startDragResource({\r\n        initialMousePosition: getPosition(e.data),\r\n        offset: getOffset(e.data),\r\n        resourceId: e.data.targetRx?.rxId,\r\n        mousePosition: getPosition(e.data),\r\n      })\r\n    } else if (e.data.targetRx?.nodeType === NodeType.Node) {\r\n      const nodeId = e.data.targetRx?.rxId\r\n      if (nodeId) {\r\n        const beheavior = this.engine.getNodeBehavior(nodeId)\r\n        const node = this.engine.getMonitor().getNode(nodeId)\r\n        if (beheavior.isDraggable() && !node?.isSlot) {\r\n          this.engine.getActions().startDragNodes({\r\n            initialMousePosition: getPosition(e.data),\r\n            offset: getOffset(e.data),\r\n            nodeIds: [nodeId],\r\n            mousePosition: getPosition(e.data)\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  destory(): void {\r\n    this.unsucribe()\r\n  }\r\n\r\n}\r\n\r\nexport const StartDragController = (engine: IDesignerEngine) => {\r\n  return new StartDragControllerImpl(engine)\r\n}"],"names":["DragStartEvent","NodeType","getOffset","getPosition","StartDragControllerImpl","destory","unsucribe","constructor","engine","name","handleDragStart","e","data","targetRx","nodeType","Resource","rxId","getActions","startDragResource","initialMousePosition","offset","resourceId","mousePosition","Node","nodeId","beheavior","getNodeBehavior","node","getMonitor","getNode","isDraggable","isSlot","startDragNodes","nodeIds","getShell","subscribeTo","StartDragController"],"mappings":"AAAA,SAASA,cAAc,QAAQ,qBAAqB;AACpD,SAA0BC,QAAQ,QAAqB,aAAa;AACpE,SAASC,SAAS,EAAEC,WAAW,QAAQ,sBAAsB;AAG7D,OAAO,MAAMC;IAiCXC,UAAgB;QACd,IAAI,CAACC,SAAS;IAChB;IA/BAC,YAAsBC,OAAyB;sBAAzBA;aAHtBC,OAAe;aAOfC,kBAAkB,CAACC,IAAsB;gBACnCA,kBAOOA;YAPX,IAAIA,CAAAA,CAAAA,mBAAAA,EAAEC,IAAI,CAACC,QAAQ,cAAfF,8BAAAA,KAAAA,IAAAA,iBAAiBG,QAAQ,AAAD,MAAMb,SAASc,QAAQ,EAAE;oBACnDJ,mBAGcA;gBAHdA,CAAAA,CAAAA,oBAAAA,EAAEC,IAAI,CAACC,QAAQ,cAAfF,+BAAAA,KAAAA,IAAAA,kBAAiBK,IAAI,AAAD,KAAK,IAAI,CAACR,MAAM,CAACS,UAAU,GAAGC,iBAAiB,CAAC;oBAClEC,sBAAsBhB,YAAYQ,EAAEC,IAAI;oBACxCQ,QAAQlB,UAAUS,EAAEC,IAAI;oBACxBS,YAAYV,CAAAA,oBAAAA,EAAEC,IAAI,CAACC,QAAQ,cAAfF,+BAAAA,KAAAA,IAAAA,kBAAiBK,IAAI;oBACjCM,eAAenB,YAAYQ,EAAEC,IAAI;gBACnC;YACF,OAAO,IAAID,CAAAA,CAAAA,oBAAAA,EAAEC,IAAI,CAACC,QAAQ,cAAfF,+BAAAA,KAAAA,IAAAA,kBAAiBG,QAAQ,AAAD,MAAMb,SAASsB,IAAI,EAAE;oBACvCZ;gBAAf,MAAMa,SAASb,CAAAA,oBAAAA,EAAEC,IAAI,CAACC,QAAQ,cAAfF,+BAAAA,KAAAA,IAAAA,kBAAiBK,IAAI;gBACpC,IAAIQ,QAAQ;oBACV,MAAMC,YAAY,IAAI,CAACjB,MAAM,CAACkB,eAAe,CAACF;oBAC9C,MAAMG,OAAO,IAAI,CAACnB,MAAM,CAACoB,UAAU,GAAGC,OAAO,CAACL;oBAC9C,IAAIC,UAAUK,WAAW,MAAM,CAACH,CAAAA,iBAAAA,kBAAAA,KAAAA,IAAAA,KAAMI,MAAM,AAAD,GAAG;wBAC5C,IAAI,CAACvB,MAAM,CAACS,UAAU,GAAGe,cAAc,CAAC;4BACtCb,sBAAsBhB,YAAYQ,EAAEC,IAAI;4BACxCQ,QAAQlB,UAAUS,EAAEC,IAAI;4BACxBqB,SAAS;gCAACT;6BAAO;4BACjBF,eAAenB,YAAYQ,EAAEC,IAAI;wBACnC;oBACF,CAAC;gBACH,CAAC;YACH,CAAC;QACH;QA1BE,IAAI,CAACN,SAAS,GAAGE,OAAO0B,QAAQ,GAAGC,WAAW,CAACnC,gBAAgB,IAAI,CAACU,eAAe;IACrF;AA+BF,CAAC;AAED,OAAO,MAAM0B,sBAAsB,CAAC5B,SAA4B;IAC9D,OAAO,IAAIJ,wBAAwBI;AACrC,EAAC"}