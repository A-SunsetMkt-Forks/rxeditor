import { State } from "reducers";
import { IDesignerEngine, IDesignerShell, IMonitor, INodeSchema, IDocument, IResourceManager, ID, IComponentManager, NodeBehavior } from "interfaces";
import { Store } from "redux";
import { IActions, IAction } from "interfaces/action";
import { ILocalesManager } from "interfaces/loacales";
import { IPlugin, IPluginFactory } from "interfaces/plugin";
import { IDecoratorManager } from "interfaces/decorator";
export declare class DesignerEngine implements IDesignerEngine {
    private store;
    private shell;
    private monitor;
    private documentsById;
    private resourceManager;
    private localesManager;
    private actions;
    private componentManager;
    private decoratorManager;
    private plugins;
    constructor(store: Store<State>, shell: IDesignerShell, monitor: IMonitor, plugins: IPluginFactory[], lang?: string);
    getDecoratorManager(): IDecoratorManager;
    getComponentManager(): IComponentManager;
    getLoacalesManager(): ILocalesManager;
    getLanguage(): string;
    setLanguage(lang: string): void;
    getNodeDocument(nodeId: string): IDocument | null;
    getAllDocuments(): IDocument[] | null;
    setSelectionMode(mode: SelectionMode): void;
    createDocument(schema: INodeSchema): IDocument;
    getDocument(id: string): IDocument | null;
    getResourceManager(): IResourceManager;
    getMonitor(): IMonitor;
    getShell(): IDesignerShell;
    getActions(): IActions;
    dispatch(action: IAction<any>): void;
    destory(): void;
    getNodeBehavior(nodeId: ID): NodeBehavior;
    registerPlugin(pluginFactory: IPluginFactory): void;
    getPlugin(name: string): IPlugin | null;
}
export declare const checkAbility: (name: "disabled" | "selectable" | "droppable" | "draggable" | "deletable" | "cloneable" | "noPlaceholder" | "noRef" | "lockable", defaultValue: boolean, nodeId: ID, engine: IDesignerEngine) => boolean;
