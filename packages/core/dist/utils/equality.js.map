{"version":3,"sources":["../../src/utils/equality.ts"],"sourcesContent":["import { IXYCoord } from \"core/interfaces\"\n\nexport type EqualityCheck<T> = (a: T, b: T) => boolean\nexport const strictEquality = <T>(a: T, b: T): boolean => a === b\n\n/**\n * Determine if two cartesian coordinate offsets are equal\n * @param offsetA\n * @param offsetB\n */\nexport function areCoordsEqual(\n\toffsetA: IXYCoord | null | undefined,\n\toffsetB: IXYCoord | null | undefined,\n): boolean {\n\tif (!offsetA && !offsetB) {\n\t\treturn true\n\t} else if (!offsetA || !offsetB) {\n\t\treturn false\n\t} else {\n\t\treturn offsetA.x === offsetB.x && offsetA.y === offsetB.y\n\t}\n}\n\n/**\n * Determines if two arrays of items are equal\n * @param a The first array of items\n * @param b The second array of items\n */\nexport function areArraysEqual<T>(\n\ta: T[],\n\tb: T[],\n\tisEqual: EqualityCheck<T> = strictEquality,\n): boolean {\n\tif (a.length !== b.length) {\n\t\treturn false\n\t}\n\tfor (let i = 0; i < a.length; ++i) {\n\t\tif (!isEqual(a[i] as T, b[i] as T)) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n"],"names":["strictEquality","a","b","areCoordsEqual","offsetA","offsetB","x","y","areArraysEqual","isEqual","length","i"],"mappings":"AAGA,OAAO,MAAMA,iBAAiB,CAAIC,GAAMC,IAAkBD,MAAMC,EAAC;AAEjE;;;;CAIC,GACD,OAAO,SAASC,eACfC,OAAoC,EACpCC,OAAoC,EAC1B;IACV,IAAI,CAACD,WAAW,CAACC,SAAS;QACzB,OAAO,IAAI;IACZ,OAAO,IAAI,CAACD,WAAW,CAACC,SAAS;QAChC,OAAO,KAAK;IACb,OAAO;QACN,OAAOD,QAAQE,CAAC,KAAKD,QAAQC,CAAC,IAAIF,QAAQG,CAAC,KAAKF,QAAQE,CAAC;IAC1D,CAAC;AACF,CAAC;AAED;;;;CAIC,GACD,OAAO,SAASC,eACfP,CAAM,EACNC,CAAM,EACNO,UAA4BT,cAAc,EAChC;IACV,IAAIC,EAAES,MAAM,KAAKR,EAAEQ,MAAM,EAAE;QAC1B,OAAO,KAAK;IACb,CAAC;IACD,IAAK,IAAIC,IAAI,GAAGA,IAAIV,EAAES,MAAM,EAAE,EAAEC,EAAG;QAClC,IAAI,CAACF,QAAQR,CAAC,CAACU,EAAE,EAAOT,CAAC,CAACS,EAAE,GAAQ;YACnC,OAAO,KAAK;QACb,CAAC;IACF;IACA,OAAO,IAAI;AACZ,CAAC"}