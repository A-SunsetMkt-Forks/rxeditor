{"version":3,"sources":["../../../src/shell/drivers/KeyboardDriver.ts"],"sourcesContent":["import { KeyDownEvent, KeyUpEvent } from \"shell/events/keyboard\"\r\nimport { IDriver, IDriverFactory } from \"interfaces\"\r\nimport { IDispatchable, ICustomEvent } from \"interfaces/event\"\r\n\r\nfunction filter(event: KeyboardEvent) {\r\n  const target: any = event.target\r\n  const { tagName } = target\r\n  let flag = true\r\n  // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>„ÄÅWeb Components\r\n  if (\r\n    target['isContentEditable'] ||\r\n    ((tagName === 'INPUT' ||\r\n      tagName === 'TEXTAREA' ||\r\n      tagName === 'SELECT' ||\r\n      customElements.get(tagName.toLocaleLowerCase())) &&\r\n      !target.readOnly)\r\n  ) {\r\n    flag = false\r\n  }\r\n  return flag\r\n}\r\n\r\nexport class KeyboardDriverImpl implements IDriver {\r\n\r\n  constructor(private dispatcher: IDispatchable<ICustomEvent<any>>, private element: Element | Node | HTMLElement) {\r\n    this.attach()\r\n  }\r\n\r\n  onKeyDown = (e: KeyboardEvent) => {\r\n    if (!filter(e)) return\r\n    this.dispatcher.dispatch(new KeyDownEvent(e))\r\n  }\r\n\r\n  onKeyUp = (e: KeyboardEvent) => {\r\n    this.dispatcher.dispatch(new KeyUpEvent(e))\r\n  }\r\n\r\n  attach() {\r\n     this.element?.addEventListener('keydown', this.onKeyDown as EventListener)\r\n     this.element?.addEventListener('keyup', this.onKeyUp as EventListener)\r\n  }\r\n\r\n  teardown(): void {\r\n     this.element?.removeEventListener('keydown', this.onKeyDown as EventListener)\r\n     this.element?.removeEventListener('keyup', this.onKeyUp as EventListener)\r\n  }\r\n}\r\n\r\nexport const KeyboardDriver: IDriverFactory = (\r\n  dispatcher: IDispatchable<ICustomEvent<any>>,\r\n  element: Element | Node | HTMLElement,\r\n) => {\r\n  return new KeyboardDriverImpl(\r\n    dispatcher,\r\n    element,\r\n  )\r\n}"],"names":["KeyDownEvent","KeyUpEvent","filter","event","target","tagName","flag","customElements","get","toLocaleLowerCase","readOnly","KeyboardDriverImpl","attach","element","addEventListener","onKeyDown","onKeyUp","teardown","removeEventListener","constructor","dispatcher","e","dispatch","KeyboardDriver"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,QAAQ,wBAAuB;AAIhE,SAASC,OAAOC,KAAoB,EAAE;IACpC,MAAMC,SAAcD,MAAMC,MAAM;IAChC,MAAM,EAAEC,QAAO,EAAE,GAAGD;IACpB,IAAIE,OAAO,IAAI;IACf,qHAAqH;IACrH,IACEF,MAAM,CAAC,oBAAoB,IAC1B,AAACC,CAAAA,YAAY,WACZA,YAAY,cACZA,YAAY,YACZE,eAAeC,GAAG,CAACH,QAAQI,iBAAiB,GAAE,KAC9C,CAACL,OAAOM,QAAQ,EAClB;QACAJ,OAAO,KAAK;IACd,CAAC;IACD,OAAOA;AACT;AAEA,OAAO,MAAMK;IAeXC,SAAS;YACN,eACA;QADA,CAAA,gBAAA,IAAI,CAACC,OAAO,cAAZ,2BAAA,KAAA,IAAA,cAAcC,iBAAiB,WAAW,IAAI,CAACC,SAAS;QACxD,CAAA,iBAAA,IAAI,CAACF,OAAO,cAAZ,4BAAA,KAAA,IAAA,eAAcC,iBAAiB,SAAS,IAAI,CAACE,OAAO;IACvD;IAEAC,WAAiB;YACd,eACA;QADA,CAAA,gBAAA,IAAI,CAACJ,OAAO,cAAZ,2BAAA,KAAA,IAAA,cAAcK,oBAAoB,WAAW,IAAI,CAACH,SAAS;QAC3D,CAAA,iBAAA,IAAI,CAACF,OAAO,cAAZ,4BAAA,KAAA,IAAA,eAAcK,oBAAoB,SAAS,IAAI,CAACF,OAAO;IAC1D;IArBAG,YAAoBC,YAAsDP,QAAuC;0BAA7FO;uBAAsDP;aAI1EE,YAAY,CAACM,IAAqB;YAChC,IAAI,CAACnB,OAAOmB,IAAI;YAChB,IAAI,CAACD,UAAU,CAACE,QAAQ,CAAC,IAAItB,aAAaqB;QAC5C;aAEAL,UAAU,CAACK,IAAqB;YAC9B,IAAI,CAACD,UAAU,CAACE,QAAQ,CAAC,IAAIrB,WAAWoB;QAC1C;QAVE,IAAI,CAACT,MAAM;IACb;AAoBF,CAAC;AAED,OAAO,MAAMW,iBAAiC,CAC5CH,YACAP,UACG;IACH,OAAO,IAAIF,mBACTS,YACAP;AAEJ,EAAC"}